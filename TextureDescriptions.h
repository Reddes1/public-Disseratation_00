#pragma once

/*
	Any texture that needs to be loaded should be added here.
	Manages the SRV Heap offset when used in the texture loading process.
	ONLY ADD AS MANY TEXTURES THAT YOU ARE GONNA LOAD!!
	Must mirror texture count
*/

enum TextureDescriptions
{
	TEST_ATLAS_00,
	ANIM_TEST_ALTAS_00,
	TEST_BG_00,
	BK_UI_ATLAS_00,
	TROPICS_TESTMAP_00,
	TEXTURE_COUNT
};
enum FontDescriptions
{	
	//Default, Testing Fonts
	//DO NOT REMOVE
	CALIBRI_12,
	CALIBRI_14,
	CALIBRI_16,
	CALIBRI_18,
	CALIBRI_20,
	CALIBRI_22,
	//User Fonts Below This Point
	FONT_COUNT
};

//Measured count of required heap resources
const int RESOURCE_HEAP_RESERVE_COUNT = TextureDescriptions::TEXTURE_COUNT + FontDescriptions::FONT_COUNT;
//Un-measured reservation count, change as needed (this replaces the need to define texture descriptions if doing this)
const int RESOURCE_HEAP_RESERVE_STANDARD = 100;


///////////////////////
/// Default Texture ///
/// DO NOT REMOVE!! ///
/// ///////////////////

enum TestingTexture00Desc
{
	CHECKER_BOX_1024x1024,
	CHECKER_BOX_512x512,
	CHECKER_BOX_256x256,
	CHECKER_BOX_128x128,
	CHECKER_BOX_64x64,
	CHECKER_BOX_32x32,
	CHECKER_BOX_16x16,
	CHECKER_BOX_8x8,
	EMPTY_FRAME,
	FRAME_COUNT
};

enum BK_UI_Bundle_00_Desc
{
	BK_UI_BLUE_00_CURV_512x512,
	BK_UI_BLUE_00_SQ_512x512,
	BK_UI_RED_00_CURV_512x512,
	BK_UI_RED_00_SQ_512x512,
	BK_UI_BLUE_00_COMP_02_256x256,
	BK_UI_BLUE_00_COMP_07_256x256,
	BK_UI_RED_00_COMP_02_256x256,
	BK_UI_RED_00_COMP_07_256x256,
	BK_UI_BLUE_00_COMP_05_256x128,
	BK_UI_RED_00_COMP_05_256x128,
	BK_UI_BLUE_00_CURV_256x256,
	BK_UI_BLUE_00_SQ_256x256,
	BK_UI_RED_00_CURV_256x256,
	BK_UI_RED_00_SQ_256x256,
	BK_UI_BLUE_00_CURV_256x64,
	BK_UI_BLUE_00_SQ_256x64,
	BK_UI_RED_00_CURV_256x64,
	BK_UI_RED_00_SQ_256x64,
	BK_UI_BLUE_00_CURV_256x32,
	BK_UI_BLUE_00_COMP_01_128x256,
	BK_UI_BLUE_00_COMP_06_128x256,
	BK_UI_BLUE_00_CURV_64x64,
	BK_UI_BLUE_00_SQ_64x64,
	BK_UI_RED_00_CURV_64x64,
	BK_UI_RED_00_SQ_64x64,
	BK_UI_BLUE_TILE_HIGHLIGHT_00_48x48,
	BK_UI_RED_00_COMP_01_128x256,
	BK_UI_RED_TILE_HIGHLIGHT_00_48x48,
	BK_UI_RED_00_CURV_256x32,
	BK_UI_RED_00_COMP_06_128x256,
	BK_UI_BLUE_00_COMP_00_128x128,
	BK_UI_BLUE_00_COMP_04_128x128,
	BK_UI_RED_00_COMP_00_128x128,
	BK_UI_BLUE_00_COMP_03_128x64,
	BK_UI_RED_00_COMP_04_128x128,
	BK_UI_TILE_CURSOR_00,
	BK_UI_PF_TRACK_00_48x48,
	BK_UI_PF_TRACK_01_48x48,
	BK_UI_PF_TRACK_02_48x48,
	BK_UI_PF_TRACK_03_48x48,
	BK_UI_PF_TRACK_04_48x48,
	BK_UI_RED_00_COMP_03_128x64,
	BK_UI_BLUE_00_CURV_64x32,
	BK_UI_BLUE_00_CURV_128x128,
	BK_UI_BLUE_00_SQ_64x32,
	BK_UI_BLUE_00_SQ_128x128,
	BK_UI_RED_00_CURV_128x128,
	BK_UI_RED_00_SQ_128x128,
	BK_UI_BLUE_00_CURV_128x64,
	BK_UI_BLUE_00_HIGHLIGHT_01_128x64,
	BK_UI_BLUE_CURV_128x32,
	BK_UI_BLUE_00_SQ_128x64,
	BK_UI_RED_00_CURV_128x64,
	BK_UI_RED_00_HIGHLIGHT_00_128x64,
	BK_UI_RED_00_SQ_128x64,
	BK_UI_BLUE_00_HIGHLIGHT_01_128x32,
	BK_UI_BLUE_00_SQ_128x32,
	BK_UI_HIGHLIGHT_00_128x32,
	BK_UI_RED_00_CURV_128x32,
	BK_UI_RED_00_HIGHLIGHT_00_128x32,
	BK_UI_PF_TRACK_05_48x48,
	BK_UI_PF_TRACK_06_48x48,
	BK_UI_PF_TRACK_07_48x48,
	BK_UI_RED_00_SQ_128x32,
	BK_UI_RED_00_CURV_64x32,
	BK_UI_RED_00_SQ_64x32,
	BK_UI_PF_TRACK_08_48x48,
	BK_UI_PF_TRACK_09_48x48,
	BK_UI_BUNDLE_00_COUNT
};


/////////////////////////////////////////
/// User Defined Texture Descriptions ///
/////////////////////////////////////////